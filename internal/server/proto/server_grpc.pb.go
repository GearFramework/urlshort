// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortlyService_Ping_FullMethodName             = "/server.ShortlyService/Ping"
	ShortlyService_EncodeURL_FullMethodName        = "/server.ShortlyService/EncodeURL"
	ShortlyService_BatchEncodeURLs_FullMethodName  = "/server.ShortlyService/BatchEncodeURLs"
	ShortlyService_DecodeURL_FullMethodName        = "/server.ShortlyService/DecodeURL"
	ShortlyService_GetUserURLs_FullMethodName      = "/server.ShortlyService/GetUserURLs"
	ShortlyService_DeleteUserURLs_FullMethodName   = "/server.ShortlyService/DeleteUserURLs"
	ShortlyService_GetInternalStats_FullMethodName = "/server.ShortlyService/GetInternalStats"
)

// ShortlyServiceClient is the client API for ShortlyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortlyServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	EncodeURL(ctx context.Context, in *EncodeURLRequest, opts ...grpc.CallOption) (*EncodeURLResponse, error)
	BatchEncodeURLs(ctx context.Context, in *BatchEncodeURLRequest, opts ...grpc.CallOption) (*BatchEncodeURLResponse, error)
	DecodeURL(ctx context.Context, in *DecodeURLRequest, opts ...grpc.CallOption) (*DecodeURLResponse, error)
	GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (*GetUserURLsResponse, error)
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error)
	GetInternalStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortlyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortlyServiceClient(cc grpc.ClientConnInterface) ShortlyServiceClient {
	return &shortlyServiceClient{cc}
}

func (c *shortlyServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShortlyService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) EncodeURL(ctx context.Context, in *EncodeURLRequest, opts ...grpc.CallOption) (*EncodeURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeURLResponse)
	err := c.cc.Invoke(ctx, ShortlyService_EncodeURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) BatchEncodeURLs(ctx context.Context, in *BatchEncodeURLRequest, opts ...grpc.CallOption) (*BatchEncodeURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchEncodeURLResponse)
	err := c.cc.Invoke(ctx, ShortlyService_BatchEncodeURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) DecodeURL(ctx context.Context, in *DecodeURLRequest, opts ...grpc.CallOption) (*DecodeURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeURLResponse)
	err := c.cc.Invoke(ctx, ShortlyService_DecodeURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (*GetUserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortlyService_GetUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortlyService_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlyServiceClient) GetInternalStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, ShortlyService_GetInternalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortlyServiceServer is the server API for ShortlyService service.
// All implementations must embed UnimplementedShortlyServiceServer
// for forward compatibility.
type ShortlyServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	EncodeURL(context.Context, *EncodeURLRequest) (*EncodeURLResponse, error)
	BatchEncodeURLs(context.Context, *BatchEncodeURLRequest) (*BatchEncodeURLResponse, error)
	DecodeURL(context.Context, *DecodeURLRequest) (*DecodeURLResponse, error)
	GetUserURLs(context.Context, *GetUserURLsRequest) (*GetUserURLsResponse, error)
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error)
	GetInternalStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortlyServiceServer()
}

// UnimplementedShortlyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortlyServiceServer struct{}

func (UnimplementedShortlyServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortlyServiceServer) EncodeURL(context.Context, *EncodeURLRequest) (*EncodeURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeURL not implemented")
}
func (UnimplementedShortlyServiceServer) BatchEncodeURLs(context.Context, *BatchEncodeURLRequest) (*BatchEncodeURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEncodeURLs not implemented")
}
func (UnimplementedShortlyServiceServer) DecodeURL(context.Context, *DecodeURLRequest) (*DecodeURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeURL not implemented")
}
func (UnimplementedShortlyServiceServer) GetUserURLs(context.Context, *GetUserURLsRequest) (*GetUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLs not implemented")
}
func (UnimplementedShortlyServiceServer) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedShortlyServiceServer) GetInternalStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalStats not implemented")
}
func (UnimplementedShortlyServiceServer) mustEmbedUnimplementedShortlyServiceServer() {}
func (UnimplementedShortlyServiceServer) testEmbeddedByValue()                        {}

// UnsafeShortlyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortlyServiceServer will
// result in compilation errors.
type UnsafeShortlyServiceServer interface {
	mustEmbedUnimplementedShortlyServiceServer()
}

func RegisterShortlyServiceServer(s grpc.ServiceRegistrar, srv ShortlyServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortlyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortlyService_ServiceDesc, srv)
}

func _ShortlyService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_EncodeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).EncodeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_EncodeURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).EncodeURL(ctx, req.(*EncodeURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_BatchEncodeURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEncodeURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).BatchEncodeURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_BatchEncodeURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).BatchEncodeURLs(ctx, req.(*BatchEncodeURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_DecodeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).DecodeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_DecodeURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).DecodeURL(ctx, req.(*DecodeURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_GetUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).GetUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_GetUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).GetUserURLs(ctx, req.(*GetUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlyService_GetInternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlyServiceServer).GetInternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlyService_GetInternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlyServiceServer).GetInternalStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortlyService_ServiceDesc is the grpc.ServiceDesc for ShortlyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortlyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ShortlyService",
	HandlerType: (*ShortlyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ShortlyService_Ping_Handler,
		},
		{
			MethodName: "EncodeURL",
			Handler:    _ShortlyService_EncodeURL_Handler,
		},
		{
			MethodName: "BatchEncodeURLs",
			Handler:    _ShortlyService_BatchEncodeURLs_Handler,
		},
		{
			MethodName: "DecodeURL",
			Handler:    _ShortlyService_DecodeURL_Handler,
		},
		{
			MethodName: "GetUserURLs",
			Handler:    _ShortlyService_GetUserURLs_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _ShortlyService_DeleteUserURLs_Handler,
		},
		{
			MethodName: "GetInternalStats",
			Handler:    _ShortlyService_GetInternalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
